name: Secure CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  AWS_REGION: "eu-west-1"

jobs:
  security-scans:
    name: Security Scanning
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Install Dependencies
        run: |
          pip install safety bandit
          npm install -g snyk

      - name: Run Static Code Analysis (Bandit for Python)
        run: bandit -r .

      - name: Run Dependency Scanning (Snyk)
        run: snyk test || true

      - name: Infrastructure as Code Security Scan (Checkov)
        uses: bridgecrewio/checkov-action@v12
        with:
          framework: terraform

  build-and-test:
    name: Build & Test
    runs-on: ubuntu-latest
    needs: security-scans
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install Dependencies
        run: pip install -r requirements.txt

      - name: Run Unit Tests
        run: pytest --junitxml=test-results.xml

      - name: Upload Test Results
        uses: actions/upload-artifact@v3
        with:
          name: test-results
          path: test-results.xml

  build-container:
    name: Build & Scan Docker Image
    runs-on: ubuntu-latest
    needs: build-and-test
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Configure AWS Credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/GitHubOIDC
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        if: github.ref == 'refs/heads/main'
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set Environment Variables
        run: |
          echo "ECR_REGISTRY=${{ steps.login-ecr.outputs.registry }}" >> $GITHUB_ENV
          echo "ECR_REPOSITORY=app" >> $GITHUB_ENV
          echo "IMAGE_TAG=$(echo $GITHUB_SHA | head -c7)" >> $GITHUB_ENV

      - name: Build Docker Image
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
      
      - name: Create ECR Repository if Not Exists
        uses: int128/create-ecr-repository-action@v1
        with:
          repository: app
      - name: Push Docker Image to ECR
        if: github.ref == 'refs/heads/main'
        run: |
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      - name: Scan Image with Trivy
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: '$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG'
          format: 'table'

      - name: Push Image to Registry
        run: |
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

  deploy:
    name: Deploy to Kubernetes
    runs-on: ubuntu-latest
    needs: build-container
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set Environment Variables
        run: |
          echo "ECR_REGISTRY=${{ steps.login-ecr.outputs.registry }}" >> $GITHUB_ENV
          echo "ECR_REPOSITORY=app" >> $GITHUB_ENV
          echo "IMAGE_TAG=$(echo $GITHUB_SHA | head -c7)" >> $GITHUB_ENV

      - name: Configure AWS Credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/GitHubOIDC
          aws-region: ${{ env.AWS_REGION }}

      - name: Deploy with Helm
        run: |
          helm upgrade --install myapp ./helm/ \
            --namespace myapp \
            --set image.repository=$ECR_REGISTRY/$ECR_REPOSITORY \
            --set image.tag=$IMAGE_TAG

      - name: Verify Deployment
        run: kubectl get pods -n myapp